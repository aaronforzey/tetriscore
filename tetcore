#include <SDL.h>
#include <iostream>
#include <vector>
#include <cstdlib>

const int SCREEN_WIDTH = 300;
const int SCREEN_HEIGHT = 600;
const int BLOCK_SIZE = 30;

SDL_Window* window;
SDL_Renderer* renderer;

struct Block {
    int x, y;
};

std::vector<Block> currentPiece;
int board[10][20] = {0}; // The game board
int score = 0;
int level = 1;
int piecesFell = 0;

// Tetromino shapes
const int tetrominos[7][4] = {
    {1, 3, 5, 7},   // I-Piece
    {2, 4, 5, 7},   // Z-Piece
    {3, 5, 4, 6},   // S-Piece
    {3, 5, 4, 7},   // T-Piece
    {2, 3, 5, 7},   // L-Piece
    {3, 5, 7, 6},   // J-Piece
    {2, 3, 4, 5}    // O-Piece
};

// Function to create a new piece
void spawnPiece() {
    int random = std::rand() % 7;
    currentPiece.clear();
    for (int i = 0; i < 4; i++) {
        int x = tetrominos[random][i] % 2;
        int y = tetrominos[random][i] / 2;
        currentPiece.push_back({x + 4, y});
    }
}

// Function to draw a block
void drawBlock(int x, int y) {
    SDL_Rect rect;
    rect.x = x * BLOCK_SIZE;
    rect.y = y * BLOCK_SIZE;
    rect.w = BLOCK_SIZE;
    rect.h = BLOCK_SIZE;
    SDL_RenderFillRect(renderer, &rect);
}

// Function to draw the game board
void drawBoard() {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    for (int y = 0; y < 20; y++) {
        for (int x = 0; x < 10; x++) {
            if (board[x][y]) {
                drawBlock(x, y);
            }
        }
    }
    for (const Block& block : currentPiece) {
        drawBlock(block.x, block.y);
    }
    SDL_RenderPresent(renderer);
}

// Function to check if a move is valid
bool isValidMove(const std::vector<Block>& piece) {
    for (const Block& block : piece) {
        if (block.x < 0 || block.x >= 10 || block.y >= 20 || board[block.x][block.y]) {
            return false;
        }
    }
    return true;
}

// Function to lock the current piece into the board
void lockPiece() {
    for (const Block& block : currentPiece) {
        board[block.x][block.y] = 1;
    }
    piecesFell++;
}

// Function to check for and clear completed lines
void clearLines() {
    for (int y = 19; y >= 0; y--) {
        bool lineComplete = true;
        for (int x = 0; x < 10; x++) {
            if (board[x][y] == 0) {
                lineComplete = false;
                break;
            }
        }
        if (lineComplete) {
            for (int i = y; i > 0; i--) {
                for (int x = 0; x < 10; x++) {
                    board[x][i] = board[x][i - 1];
                }
            }
            score += 100; // Award points for each completed line
        }
    }
}

// Function to handle game over conditions
bool isGameOver() {
    for (int x = 0; x < 10; x++) {
        if (board[x][0]) {
            return true;
        }
    }
    return false;
}

// Function to increase the game speed (decrease the fall interval) based on the current level
Uint32 getFallInterval() {
    return 1000 - (level * 50); // Decrease the interval by 50ms for each level
}

int main() {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cerr << "SDL initialization failed: " << SDL_GetError() << std::endl;
        return 1;
    }

    window = SDL_CreateWindow("Tetris", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    SDL_Event e;

    bool quit = false;
    bool pieceFalling = true;
    Uint32 lastTime = 0;
    Uint32 currentTime = SDL_GetTicks();
    Uint32 deltaTime = 0;
    const Uint32 initialFallInterval = 1000; // 1 second
    Uint32 fallInterval = initialFallInterval;

    spawnPiece();

    // Main game loop
    while (!quit) {
        // Handle events
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            }
            else if (e.type == SDL_KEYDOWN) {
                switch (e.key.keysym.sym) {
                    case SDLK_LEFT:
                        {
                            std::vector<Block> tempPiece = currentPiece;
                            for (Block& block : tempPiece) {
                                block.x--;
                            }
                            if (isValidMove(tempPiece)) {
                                currentPiece = tempPiece;
                            }
                        }
                        break;
                    case SDLK_RIGHT:
                        {
                            std::vector<Block> tempPiece = currentPiece;
                            for (Block& block : tempPiece) {
                                block.x++;
                            }
                            if (isValidMove(tempPiece)) {
                                currentPiece = tempPiece;
                            }
                        }
                        break;
                    case SDLK_DOWN:
                        {
                            std::vector<Block> tempPiece = currentPiece;
                            for (Block& block : tempPiece) {
                                block.y++;
                            }
                            if (isValidMove(tempPiece)) {
                                currentPiece = tempPiece;
                            }
                        }
                        break;
                }
            }
        }

        // Handle game logic
        if (pieceFalling) {
            currentTime = SDL_GetTicks();
            deltaTime = currentTime - lastTime;
            if (deltaTime >= fallInterval) {
                std::vector<Block> tempPiece = currentPiece;
                for (Block& block : tempPiece) {
                    block.y++;
                }
                if (isValidMove(tempPiece)) {
                    currentPiece = tempPiece;
                }
                else {
                    lockPiece();
                    clearLines();
                    spawnPiece();
                    pieceFalling = !isGameOver();
                    piecesFell++;
                    if (piecesFell >= 20) {
                        level++;
                        piecesFell = 0;
                        fallInterval = getFallInterval();
                    }
                }
                lastTime = currentTime;
            }
        }

        // Render
        drawBoard();
    }

    // Cleanup and exit
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    return 0;
}
